{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ff3b93b.chunk.js","sourcesContent":["import firebase from \"firebase\"\n\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAbEQvVVs4cQwvHELBYNkCfmMPcY_o3o3I\",\n  authDomain: \"whatsappmern-e8c69.firebaseapp.com\",\n  databaseURL: \"https://whatsappmern-e8c69.firebaseio.com\",\n  projectId: \"whatsappmern-e8c69\",\n  storageBucket: \"whatsappmern-e8c69.appspot.com\",\n  messagingSenderId: \"390465313266\",\n  appId: \"1:390465313266:web:819f7528a895e51908336b\"\n};\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n  const db = firebaseApp.firestore();\n  const auth = firebase.auth();\n  const provider  = new firebase.auth.GoogleAuthProvider();\n\n  export {auth, provider};\n  export default db;\n","import { Avatar } from '@material-ui/core'\nimport React , {useEffect, useState} from 'react'\nimport db from \"./firebase\"\nimport \"./SidebarChat.css\"\nimport {Link} from \"react-router-dom\"\n\nfunction SidebarChat({id, name, addNewChat}) {\n\n    const [seed, setSeed] = useState('');\n    const [messages, setMessages] = useState(\"\");\n\n    useEffect(() => {\n\n        if (id) {\n            db.collection(\"rooms\")\n            .doc(id)\n            .collection(\"messages\")\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) =>\n            setMessages(snapshot.docs.map((doc) => \n            doc.data()\n            ))\n            )\n        }\n    }, [id]);\n\n    useEffect(() => {\n        setSeed(Math.floor(\n            Math.random() * 5000\n        ))\n    }, []);\n    const createChat = () => {\n        const roomName = prompt(\"Please enter name for chat room\");\n        if(roomName)\n        {\n            db.collection('rooms').add({\n                name: roomName,\n            })\n        }\n    }\n    return !addNewChat ? (\n\n        <Link to={`/rooms/${id}`}>\n\n        <div className=\"sidebarChat\">\n\n            <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n            <div className=\" sidebarChar__info\">\n                <h2> {name} </h2>\n                <p>{messages[0]?.message}</p>\n            </div>\n        </div>\n        </Link>\n    ):(\n        <div onClick={createChat} className=\"sidebarChat\">\n                <h2>\n                    Add new chat\n                </h2>\n        </div>\n    )\n}\nexport default SidebarChat\n","import React, { createContext, useContext, useReducer } from 'react'\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({reducer, \n    initialState, \n    children}) => (\n    <StateContext.Provider value = {useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider> \n);\n\nexport const useStateValue = () => useContext(StateContext);","import React , { useState , useEffect}from 'react'\nimport './Sidebar.css'\nimport { Avatar, IconButton } from '@material-ui/core'\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\nimport SidebarChat from './SidebarChat'\nimport db from \"./firebase\"\nimport { useStateValue } from './StateProvider';\n\nfunction Sidebar() {\n\n    const [rooms, setRooms] = useState([])\n    const [{ user }] = useStateValue();\n    useEffect(() => {\n\n        const unsubscribe = db.collection('rooms').onSnapshot( (snapshot) => \n\n            setRooms(snapshot.docs.map(doc => (\n                {\n                    id: doc.id,\n                    data: doc.data(),\n                }))\n                )\n        );\n        return () => {\n            unsubscribe()\n        };\n    }, []);\n\n    \n    return (\n        <div className=\"sidebar\">\n\n            <div className=\"sidebar__header\">\n\n                <Avatar src={user?.photoURL}/>\n                <div className=\"sidebar__headerRight\">\n                    <IconButton>\n                        <DonutLargeIcon />\n                    </IconButton>\n                    <IconButton>\n                        <ChatIcon/>\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                \n                </div>\n\n\n            </div>\n\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n\n                <SearchOutlined/>\n                    <input placeholder=\"Search or start new chats\"\n                    type=\"text\" />\n                </div>\n            </div>\n\n            <div className=\"sidebar__chats\">\n\n                <SidebarChat addNewChat />\n                {rooms.map(room => (\n                    <SidebarChat key={room.id} id={room.id}\n                    name={room.data.name}/>\n                ))}\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import { Avatar, IconButton } from '@material-ui/core'\nimport React, { useState, useEffect } from 'react'\nimport './Chat.css'\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\"\nimport MicIcon from \"@material-ui/icons/Mic\"\nimport { useParams } from 'react-router-dom';\nimport db from './firebase';\nimport firebase from 'firebase'\nimport { useStateValue } from './StateProvider';\n \nfunction Chat() {\n    \n    const [seed, setSeed] = useState('')\n    const [input, setInput] = useState(\"\")\n    const { roomId } = useParams();\n    const [roomName ,setRoomName] = useState('') \n    const [messages, setMessages] = useState([])\n    const [{ user }] = useStateValue();\n    \n    useEffect(() => {\n        if(roomId)\n        {\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => (\n                setRoomName(snapshot.data().name)\n            ))\n\n            db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => (\n                setMessages(snapshot.docs.map(doc => doc.data()))\n            ))\n        }\n    }, [roomId])\n\n    useEffect(() => {\n        setSeed(Math.floor(\n            Math.random() * 5000 ))\n    }, [roomId]);\n\n \n\n    const sendMessage = (e) =>\n    {\n        e.preventDefault(); // prevent refresh in from submit\n        db.collection(\"rooms\").doc(roomId).collection('messages').add({\n\n            message: input,\n            name: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        setInput(\"\");\n        \n    }\n    \n    return (\n        <div className=\"chat\">\n\n                <div className=\"chat__header\">\n                    <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n                    <div className=\"chat__headerInfo\">\n                        <h3> {roomName}</h3>\n                        <p>\n                            last seen {\" \"}\n                            {new Date(messages[messages.length - 1]?.timestamp?.toDate()\n                                        ).toUTCString()}\n                        </p>\n                    </div>\n                    <div className=\"chat__headerRight\">\n                        <IconButton>\n                            <DonutLargeIcon />\n                        </IconButton>\n                        <IconButton>\n                            <ChatIcon/>\n                        </IconButton>\n                        <IconButton>\n                            <MoreVertIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div className=\"chat__body\">\n                    {messages.map((message) => (\n\n                        <p className={`chat__message ${message.name === user.displayName && \"chat__reciever\"}`}> \n                        <span className=\"chat__name\">\n                            {message.name}\n                        </span>\n                        {message.message}\n                        <span className=\"chat__timestamp\">\n                            {new Date(message.timestamp?.toDate()).toUTCString()}\n                        </span>\n                        </p>\n                    ))}\n                   \n                </div>\n                <div className=\"chat__footer\">\n\n                    <InsertEmoticonIcon />\n                    <form>\n                        <input type=\"text\"\n                        value = {input}\n                        onChange = {(e) => setInput(e.target.value)}\n                        placeholder=\"type a message\" />\n                        <button \n                        type=\"submit\"\n                        onClick={sendMessage}>\n                             Send a message\n                        </button>\n                    </form>\n                    <MicIcon />\n\n                </div>\n        </div>\n    )\n}\n\nexport default Chat\n","export const initialState = {\n    user: null,\n}\n\nexport const actionTypes = {\n\n    SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n\n    console.log(action);\n    switch(action.type)\n    {\n        case actionTypes.SET_USER:\n            return{\n                ...state,\n                user: action.user,\n\n            };\n\n            default:\n                return state;\n    }\n};\n\nexport default reducer;\n","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport { auth, provider } from './firebase'\nimport \"./Login.css\"\nimport { actionTypes } from './reducer'\nimport { useStateValue } from './StateProvider'\n\nfunction Login() {\n    const [ {}, dispatch] = useStateValue();\n\n    const signIn = () =>\n    {\n        auth.signInWithPopup(provider).then((result) => {\n            dispatch({\n                type: actionTypes.SET_USER,\n                user: result.user,\n            })\n        }).catch((error) => alert(error.message));\n    }\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n                <img\n                \n                src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\"\n                alt=\"\"\n                />\n                <div className=\"login__text\">\n                    <h1> SIGN IN TO WHATSAPP</h1>\n                </div>\n\n                <Button \n                onClick={signIn}>\n                    Sign In With Google\n                </Button>\n            </div>            \n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat'\nimport {Route, BrowserRouter, Switch} from 'react-router-dom';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\n\nfunction App() {\n  const [{ user }] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ): (\n        <div className = \"app__body\">\n        <BrowserRouter>\n        <Switch>\n          <Route path=\"/rooms/:roomId\">\n                <Sidebar />\n                <Chat />\n          </Route>\n          <Route path=\"/\">\n            <Sidebar />\n          </Route>\n        </Switch>\n        </BrowserRouter>\n      </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from \"./StateProvider\"\nimport reducer, { initialState}  from \"./reducer\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} \n    reducer={reducer}>\n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}